const express = require('express');
const mongoose = require('mongoose');
const cors = require('cors');
const bodyParser = require('body-parser');

const app = express();
app.use(cors());
app.use(bodyParser.json());

// MongoDB connection
mongoose.connect('mongodb://127.0.0.1:27017/roi_simulator', {
  useNewUrlParser: true,
  useUnifiedTopology: true
}).then(() => console.log('MongoDB connected'))
  .catch(err => console.log(err));

// Constants
const AUTOMATED_COST_PER_INVOICE = 0.2;
const ERROR_RATE_AUTO = 0.001; // 0.1%
const MIN_ROI_BOOST_FACTOR = 1.1;

// Mongoose Schema for scenarios
const scenarioSchema = new mongoose.Schema({
  scenario_name: { type: String, required: true, unique: true },
  monthly_invoice_volume: Number,
  num_ap_staff: Number,
  avg_hours_per_invoice: Number,
  hourly_wage: Number,
  error_rate_manual: Number,
  error_cost: Number,
  time_horizon_months: Number,
  one_time_implementation_cost: Number
}, { timestamps: true });

const Scenario = mongoose.model('Scenario', scenarioSchema);

// API: Simulate ROI
app.post('/simulate', (req, res) => {
  const data = req.body;
  const labor_cost_manual = data.num_ap_staff * data.hourly_wage * data.avg_hours_per_invoice * data.monthly_invoice_volume;
  const auto_cost = data.monthly_invoice_volume * AUTOMATED_COST_PER_INVOICE;
  const error_savings = (data.error_rate_manual/100 - ERROR_RATE_AUTO) * data.monthly_invoice_volume * data.error_cost;

  let monthly_savings = (labor_cost_manual + error_savings) - auto_cost;
  monthly_savings *= MIN_ROI_BOOST_FACTOR;

  const cumulative_savings = monthly_savings * data.time_horizon_months;
  const net_savings = cumulative_savings - data.one_time_implementation_cost;
  const payback_months = data.one_time_implementation_cost / monthly_savings;
  const roi_percentage = (net_savings / data.one_time_implementation_cost) * 100;

  res.json({
    monthly_savings: monthly_savings.toFixed(2),
    cumulative_savings: cumulative_savings.toFixed(2),
    net_savings: net_savings.toFixed(2),
    payback_months: payback_months.toFixed(2),
    roi_percentage: roi_percentage.toFixed(2)
  });
});

// API: Save scenario
app.post('/scenarios', async (req, res) => {
  try {
    const scenario = new Scenario(req.body);
    await scenario.save();
    res.json({ message: 'Scenario saved successfully' });
  } catch (err) {
    res.status(400).json({ error: err.message });
  }
});

// API: Get all scenarios
app.get('/scenarios', async (req, res) => {
  const scenarios = await Scenario.find().sort({ createdAt: -1 });
  res.json(scenarios);
});

// API: Get scenario by name
app.get('/scenarios/:name', async (req, res) => {
  const scenario = await Scenario.findOne({ scenario_name: req.params.name });
  if (!scenario) return res.status(404).json({ message: 'Scenario not found' });
  res.json(scenario);
});

// API: Delete scenario by name
app.delete('/scenarios/:name', async (req, res) => {
  const result = await Scenario.deleteOne({ scenario_name: req.params.name });
  if (result.deletedCount === 0) return res.status(404).json({ message: 'Scenario not found' });
  res.json({ message: 'Scenario deleted successfully' });
});


// API: Generate report (HTML snapshot, email required)
app.post('/report/generate', async (req, res) => {
  const { scenario, email } = req.body;
  if (!email || !scenario) {
    return res.status(400).json({ error: 'Email and scenario data required' });
  }
  // Simple HTML report
  const htmlReport = `
    <html>
      <head><title>ROI Simulation Report</title></head>
      <body>
        <h2>ROI Simulation Report</h2>
        <p><strong>Scenario:</strong> ${scenario.scenario_name}</p>
        <p><strong>Email:</strong> ${email}</p>
        <ul>
          <li>Monthly Savings: $${scenario.monthly_savings}</li>
          <li>Cumulative Savings: $${scenario.cumulative_savings}</li>
          <li>Net Savings: $${scenario.net_savings}</li>
          <li>Payback (months): ${scenario.payback_months}</li>
          <li>ROI (%): ${scenario.roi_percentage}</li>
        </ul>
        <hr/>
        <small>Generated by Invoicing ROI Simulator</small>
      </body>
    </html>
  `;
  res.json({ report_html: htmlReport });
});

// Start server
const PORT = 5000;
app.listen(PORT, () => console.log(`Server running on port ${PORT}`));
